// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// new_Kriging
Rcpp::List new_Kriging(std::string kernel);
RcppExport SEXP _rlibkriging_new_Kriging(SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(new_Kriging(kernel));
    return rcpp_result_gen;
END_RCPP
}
// new_KrigingFit
Rcpp::List new_KrigingFit(arma::vec y, arma::mat X, std::string kernel, std::string regmodel, bool normalize, std::string optim, std::string objective, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _rlibkriging_new_KrigingFit(SEXP ySEXP, SEXP XSEXP, SEXP kernelSEXP, SEXP regmodelSEXP, SEXP normalizeSEXP, SEXP optimSEXP, SEXP objectiveSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< std::string >::type regmodel(regmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type optim(optimSEXP);
    Rcpp::traits::input_parameter< std::string >::type objective(objectiveSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(new_KrigingFit(y, X, kernel, regmodel, normalize, optim, objective, parameters));
    return rcpp_result_gen;
END_RCPP
}
// kriging_fit
void kriging_fit(Rcpp::List k, arma::vec y, arma::mat X, std::string regmodel, bool normalize, std::string optim, std::string objective, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _rlibkriging_kriging_fit(SEXP kSEXP, SEXP ySEXP, SEXP XSEXP, SEXP regmodelSEXP, SEXP normalizeSEXP, SEXP optimSEXP, SEXP objectiveSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type regmodel(regmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type optim(optimSEXP);
    Rcpp::traits::input_parameter< std::string >::type objective(objectiveSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    kriging_fit(k, y, X, regmodel, normalize, optim, objective, parameters);
    return R_NilValue;
END_RCPP
}
// kriging_copy
Rcpp::List kriging_copy(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_copy(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_copy(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_model
Rcpp::List kriging_model(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_model(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_model(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_summary
std::string kriging_summary(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_summary(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_summary(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_predict
Rcpp::List kriging_predict(Rcpp::List k, arma::mat X, bool stdev, bool cov, bool deriv);
RcppExport SEXP _rlibkriging_kriging_predict(SEXP kSEXP, SEXP XSEXP, SEXP stdevSEXP, SEXP covSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< bool >::type cov(covSEXP);
    Rcpp::traits::input_parameter< bool >::type deriv(derivSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_predict(k, X, stdev, cov, deriv));
    return rcpp_result_gen;
END_RCPP
}
// kriging_simulate
arma::mat kriging_simulate(Rcpp::List k, int nsim, int seed, arma::mat X);
RcppExport SEXP _rlibkriging_kriging_simulate(SEXP kSEXP, SEXP nsimSEXP, SEXP seedSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_simulate(k, nsim, seed, X));
    return rcpp_result_gen;
END_RCPP
}
// kriging_update
void kriging_update(Rcpp::List k, arma::vec y, arma::mat X);
RcppExport SEXP _rlibkriging_kriging_update(SEXP kSEXP, SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    kriging_update(k, y, X);
    return R_NilValue;
END_RCPP
}
// kriging_save
void kriging_save(Rcpp::List k, std::string filename);
RcppExport SEXP _rlibkriging_kriging_save(SEXP kSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    kriging_save(k, filename);
    return R_NilValue;
END_RCPP
}
// kriging_logLikelihoodFun
Rcpp::List kriging_logLikelihoodFun(Rcpp::List k, arma::vec theta, bool grad, bool hess, bool bench);
RcppExport SEXP _rlibkriging_kriging_logLikelihoodFun(SEXP kSEXP, SEXP thetaSEXP, SEXP gradSEXP, SEXP hessSEXP, SEXP benchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< bool >::type hess(hessSEXP);
    Rcpp::traits::input_parameter< bool >::type bench(benchSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_logLikelihoodFun(k, theta, grad, hess, bench));
    return rcpp_result_gen;
END_RCPP
}
// kriging_logLikelihood
double kriging_logLikelihood(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_logLikelihood(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_logLikelihood(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_leaveOneOutFun
Rcpp::List kriging_leaveOneOutFun(Rcpp::List k, arma::vec theta, bool grad, bool bench);
RcppExport SEXP _rlibkriging_kriging_leaveOneOutFun(SEXP kSEXP, SEXP thetaSEXP, SEXP gradSEXP, SEXP benchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< bool >::type bench(benchSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_leaveOneOutFun(k, theta, grad, bench));
    return rcpp_result_gen;
END_RCPP
}
// kriging_leaveOneOutVec
Rcpp::List kriging_leaveOneOutVec(Rcpp::List k, arma::vec theta);
RcppExport SEXP _rlibkriging_kriging_leaveOneOutVec(SEXP kSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_leaveOneOutVec(k, theta));
    return rcpp_result_gen;
END_RCPP
}
// kriging_leaveOneOut
double kriging_leaveOneOut(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_leaveOneOut(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_leaveOneOut(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_logMargPostFun
Rcpp::List kriging_logMargPostFun(Rcpp::List k, arma::vec theta, bool grad, bool bench);
RcppExport SEXP _rlibkriging_kriging_logMargPostFun(SEXP kSEXP, SEXP thetaSEXP, SEXP gradSEXP, SEXP benchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< bool >::type bench(benchSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_logMargPostFun(k, theta, grad, bench));
    return rcpp_result_gen;
END_RCPP
}
// kriging_logMargPost
double kriging_logMargPost(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_logMargPost(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_logMargPost(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_kernel
std::string kriging_kernel(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_kernel(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_kernel(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_optim
std::string kriging_optim(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_optim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_optim(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_objective
std::string kriging_objective(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_objective(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_objective(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_X
arma::mat kriging_X(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_X(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_X(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_centerX
arma::vec kriging_centerX(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_centerX(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_centerX(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_scaleX
arma::vec kriging_scaleX(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_scaleX(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_scaleX(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_y
arma::vec kriging_y(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_y(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_y(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_centerY
double kriging_centerY(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_centerY(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_centerY(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_scaleY
double kriging_scaleY(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_scaleY(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_scaleY(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_normalize
bool kriging_normalize(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_normalize(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_normalize(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_regmodel
std::string kriging_regmodel(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_regmodel(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_regmodel(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_F
arma::mat kriging_F(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_F(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_F(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_T
arma::mat kriging_T(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_T(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_T(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_M
arma::mat kriging_M(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_M(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_M(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_z
arma::vec kriging_z(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_z(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_z(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_beta
arma::vec kriging_beta(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_beta(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_beta(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_is_beta_estim
bool kriging_is_beta_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_is_beta_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_is_beta_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_theta
arma::vec kriging_theta(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_theta(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_theta(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_is_theta_estim
bool kriging_is_theta_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_is_theta_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_is_theta_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_sigma2
double kriging_sigma2(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_sigma2(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_sigma2(k));
    return rcpp_result_gen;
END_RCPP
}
// kriging_is_sigma2_estim
bool kriging_is_sigma2_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_kriging_is_sigma2_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_is_sigma2_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// linalg_get_num_nugget
double linalg_get_num_nugget();
RcppExport SEXP _rlibkriging_linalg_get_num_nugget() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(linalg_get_num_nugget());
    return rcpp_result_gen;
END_RCPP
}
// linalg_set_num_nugget
void linalg_set_num_nugget(double nugget);
RcppExport SEXP _rlibkriging_linalg_set_num_nugget(SEXP nuggetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nugget(nuggetSEXP);
    linalg_set_num_nugget(nugget);
    return R_NilValue;
END_RCPP
}
// linalg_chol_safe
arma::mat linalg_chol_safe(arma::mat X);
RcppExport SEXP _rlibkriging_linalg_chol_safe(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(linalg_chol_safe(X));
    return rcpp_result_gen;
END_RCPP
}
// linalg_set_chol_warning
void linalg_set_chol_warning(bool warn);
RcppExport SEXP _rlibkriging_linalg_set_chol_warning(SEXP warnSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type warn(warnSEXP);
    linalg_set_chol_warning(warn);
    return R_NilValue;
END_RCPP
}
// kriging_load
Rcpp::List kriging_load(std::string filename);
RcppExport SEXP _rlibkriging_kriging_load(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(kriging_load(filename));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_load
Rcpp::List noisekriging_load(std::string filename);
RcppExport SEXP _rlibkriging_noisekriging_load(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_load(filename));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_load
Rcpp::List nuggetkriging_load(std::string filename);
RcppExport SEXP _rlibkriging_nuggetkriging_load(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_load(filename));
    return rcpp_result_gen;
END_RCPP
}
// anykriging_load
Rcpp::List anykriging_load(std::string filename);
RcppExport SEXP _rlibkriging_anykriging_load(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(anykriging_load(filename));
    return rcpp_result_gen;
END_RCPP
}
// new_NoiseKriging
Rcpp::List new_NoiseKriging(std::string kernel);
RcppExport SEXP _rlibkriging_new_NoiseKriging(SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(new_NoiseKriging(kernel));
    return rcpp_result_gen;
END_RCPP
}
// new_NoiseKrigingFit
Rcpp::List new_NoiseKrigingFit(arma::vec y, arma::vec noise, arma::mat X, std::string kernel, std::string regmodel, bool normalize, std::string optim, std::string objective, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _rlibkriging_new_NoiseKrigingFit(SEXP ySEXP, SEXP noiseSEXP, SEXP XSEXP, SEXP kernelSEXP, SEXP regmodelSEXP, SEXP normalizeSEXP, SEXP optimSEXP, SEXP objectiveSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< std::string >::type regmodel(regmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type optim(optimSEXP);
    Rcpp::traits::input_parameter< std::string >::type objective(objectiveSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(new_NoiseKrigingFit(y, noise, X, kernel, regmodel, normalize, optim, objective, parameters));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_fit
void noisekriging_fit(Rcpp::List k, arma::vec y, arma::vec noise, arma::mat X, std::string regmodel, bool normalize, std::string optim, std::string objective, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _rlibkriging_noisekriging_fit(SEXP kSEXP, SEXP ySEXP, SEXP noiseSEXP, SEXP XSEXP, SEXP regmodelSEXP, SEXP normalizeSEXP, SEXP optimSEXP, SEXP objectiveSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type regmodel(regmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type optim(optimSEXP);
    Rcpp::traits::input_parameter< std::string >::type objective(objectiveSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    noisekriging_fit(k, y, noise, X, regmodel, normalize, optim, objective, parameters);
    return R_NilValue;
END_RCPP
}
// noisekriging_copy
Rcpp::List noisekriging_copy(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_copy(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_copy(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_model
Rcpp::List noisekriging_model(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_model(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_model(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_summary
std::string noisekriging_summary(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_summary(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_summary(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_predict
Rcpp::List noisekriging_predict(Rcpp::List k, arma::mat X, bool stdev, bool cov, bool deriv);
RcppExport SEXP _rlibkriging_noisekriging_predict(SEXP kSEXP, SEXP XSEXP, SEXP stdevSEXP, SEXP covSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< bool >::type cov(covSEXP);
    Rcpp::traits::input_parameter< bool >::type deriv(derivSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_predict(k, X, stdev, cov, deriv));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_simulate
arma::mat noisekriging_simulate(Rcpp::List k, int nsim, int seed, arma::mat X);
RcppExport SEXP _rlibkriging_noisekriging_simulate(SEXP kSEXP, SEXP nsimSEXP, SEXP seedSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_simulate(k, nsim, seed, X));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_update
void noisekriging_update(Rcpp::List k, arma::vec y, arma::vec noise, arma::mat X);
RcppExport SEXP _rlibkriging_noisekriging_update(SEXP kSEXP, SEXP ySEXP, SEXP noiseSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    noisekriging_update(k, y, noise, X);
    return R_NilValue;
END_RCPP
}
// noisekriging_save
void noisekriging_save(Rcpp::List k, std::string filename);
RcppExport SEXP _rlibkriging_noisekriging_save(SEXP kSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    noisekriging_save(k, filename);
    return R_NilValue;
END_RCPP
}
// noisekriging_logLikelihoodFun
Rcpp::List noisekriging_logLikelihoodFun(Rcpp::List k, arma::vec theta_sigma2, bool grad, bool bench);
RcppExport SEXP _rlibkriging_noisekriging_logLikelihoodFun(SEXP kSEXP, SEXP theta_sigma2SEXP, SEXP gradSEXP, SEXP benchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta_sigma2(theta_sigma2SEXP);
    Rcpp::traits::input_parameter< bool >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< bool >::type bench(benchSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_logLikelihoodFun(k, theta_sigma2, grad, bench));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_logLikelihood
double noisekriging_logLikelihood(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_logLikelihood(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_logLikelihood(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_kernel
std::string noisekriging_kernel(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_kernel(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_kernel(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_optim
std::string noisekriging_optim(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_optim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_optim(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_objective
std::string noisekriging_objective(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_objective(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_objective(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_X
arma::mat noisekriging_X(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_X(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_X(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_centerX
arma::vec noisekriging_centerX(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_centerX(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_centerX(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_scaleX
arma::vec noisekriging_scaleX(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_scaleX(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_scaleX(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_y
arma::vec noisekriging_y(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_y(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_y(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_noise
arma::vec noisekriging_noise(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_noise(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_noise(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_centerY
double noisekriging_centerY(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_centerY(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_centerY(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_scaleY
double noisekriging_scaleY(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_scaleY(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_scaleY(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_normalize
bool noisekriging_normalize(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_normalize(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_normalize(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_regmodel
std::string noisekriging_regmodel(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_regmodel(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_regmodel(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_F
arma::mat noisekriging_F(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_F(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_F(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_T
arma::mat noisekriging_T(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_T(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_T(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_M
arma::mat noisekriging_M(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_M(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_M(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_z
arma::vec noisekriging_z(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_z(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_z(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_beta
arma::vec noisekriging_beta(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_beta(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_beta(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_is_beta_estim
bool noisekriging_is_beta_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_is_beta_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_is_beta_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_theta
arma::vec noisekriging_theta(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_theta(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_theta(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_is_theta_estim
bool noisekriging_is_theta_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_is_theta_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_is_theta_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_sigma2
double noisekriging_sigma2(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_sigma2(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_sigma2(k));
    return rcpp_result_gen;
END_RCPP
}
// noisekriging_is_sigma2_estim
bool noisekriging_is_sigma2_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_noisekriging_is_sigma2_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noisekriging_is_sigma2_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// new_NuggetKriging
Rcpp::List new_NuggetKriging(std::string kernel);
RcppExport SEXP _rlibkriging_new_NuggetKriging(SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(new_NuggetKriging(kernel));
    return rcpp_result_gen;
END_RCPP
}
// new_NuggetKrigingFit
Rcpp::List new_NuggetKrigingFit(arma::vec y, arma::mat X, std::string kernel, std::string regmodel, bool normalize, std::string optim, std::string objective, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _rlibkriging_new_NuggetKrigingFit(SEXP ySEXP, SEXP XSEXP, SEXP kernelSEXP, SEXP regmodelSEXP, SEXP normalizeSEXP, SEXP optimSEXP, SEXP objectiveSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< std::string >::type regmodel(regmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type optim(optimSEXP);
    Rcpp::traits::input_parameter< std::string >::type objective(objectiveSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(new_NuggetKrigingFit(y, X, kernel, regmodel, normalize, optim, objective, parameters));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_fit
void nuggetkriging_fit(Rcpp::List k, arma::vec y, arma::mat X, std::string regmodel, bool normalize, std::string optim, std::string objective, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _rlibkriging_nuggetkriging_fit(SEXP kSEXP, SEXP ySEXP, SEXP XSEXP, SEXP regmodelSEXP, SEXP normalizeSEXP, SEXP optimSEXP, SEXP objectiveSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type regmodel(regmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type optim(optimSEXP);
    Rcpp::traits::input_parameter< std::string >::type objective(objectiveSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    nuggetkriging_fit(k, y, X, regmodel, normalize, optim, objective, parameters);
    return R_NilValue;
END_RCPP
}
// nuggetkriging_copy
Rcpp::List nuggetkriging_copy(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_copy(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_copy(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_model
Rcpp::List nuggetkriging_model(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_model(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_model(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_summary
std::string nuggetkriging_summary(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_summary(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_summary(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_predict
Rcpp::List nuggetkriging_predict(Rcpp::List k, arma::mat X, bool stdev, bool cov, bool deriv);
RcppExport SEXP _rlibkriging_nuggetkriging_predict(SEXP kSEXP, SEXP XSEXP, SEXP stdevSEXP, SEXP covSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type stdev(stdevSEXP);
    Rcpp::traits::input_parameter< bool >::type cov(covSEXP);
    Rcpp::traits::input_parameter< bool >::type deriv(derivSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_predict(k, X, stdev, cov, deriv));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_simulate
arma::mat nuggetkriging_simulate(Rcpp::List k, int nsim, int seed, arma::mat X);
RcppExport SEXP _rlibkriging_nuggetkriging_simulate(SEXP kSEXP, SEXP nsimSEXP, SEXP seedSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_simulate(k, nsim, seed, X));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_update
void nuggetkriging_update(Rcpp::List k, arma::vec y, arma::mat X);
RcppExport SEXP _rlibkriging_nuggetkriging_update(SEXP kSEXP, SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    nuggetkriging_update(k, y, X);
    return R_NilValue;
END_RCPP
}
// nuggetkriging_save
void nuggetkriging_save(Rcpp::List k, std::string filename);
RcppExport SEXP _rlibkriging_nuggetkriging_save(SEXP kSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    nuggetkriging_save(k, filename);
    return R_NilValue;
END_RCPP
}
// nuggetkriging_logLikelihoodFun
Rcpp::List nuggetkriging_logLikelihoodFun(Rcpp::List k, arma::vec theta_alpha, bool grad, bool bench);
RcppExport SEXP _rlibkriging_nuggetkriging_logLikelihoodFun(SEXP kSEXP, SEXP theta_alphaSEXP, SEXP gradSEXP, SEXP benchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta_alpha(theta_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< bool >::type bench(benchSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_logLikelihoodFun(k, theta_alpha, grad, bench));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_logLikelihood
double nuggetkriging_logLikelihood(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_logLikelihood(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_logLikelihood(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_logMargPostFun
Rcpp::List nuggetkriging_logMargPostFun(Rcpp::List k, arma::vec theta, bool grad, bool bench);
RcppExport SEXP _rlibkriging_nuggetkriging_logMargPostFun(SEXP kSEXP, SEXP thetaSEXP, SEXP gradSEXP, SEXP benchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< bool >::type bench(benchSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_logMargPostFun(k, theta, grad, bench));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_logMargPost
double nuggetkriging_logMargPost(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_logMargPost(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_logMargPost(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_kernel
std::string nuggetkriging_kernel(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_kernel(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_kernel(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_optim
std::string nuggetkriging_optim(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_optim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_optim(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_objective
std::string nuggetkriging_objective(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_objective(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_objective(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_X
arma::mat nuggetkriging_X(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_X(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_X(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_centerX
arma::vec nuggetkriging_centerX(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_centerX(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_centerX(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_scaleX
arma::vec nuggetkriging_scaleX(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_scaleX(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_scaleX(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_y
arma::vec nuggetkriging_y(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_y(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_y(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_centerY
double nuggetkriging_centerY(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_centerY(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_centerY(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_scaleY
double nuggetkriging_scaleY(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_scaleY(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_scaleY(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_normalize
bool nuggetkriging_normalize(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_normalize(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_normalize(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_regmodel
std::string nuggetkriging_regmodel(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_regmodel(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_regmodel(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_F
arma::mat nuggetkriging_F(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_F(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_F(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_T
arma::mat nuggetkriging_T(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_T(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_T(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_M
arma::mat nuggetkriging_M(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_M(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_M(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_z
arma::vec nuggetkriging_z(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_z(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_z(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_beta
arma::vec nuggetkriging_beta(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_beta(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_beta(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_is_beta_estim
bool nuggetkriging_is_beta_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_is_beta_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_is_beta_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_theta
arma::vec nuggetkriging_theta(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_theta(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_theta(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_is_theta_estim
bool nuggetkriging_is_theta_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_is_theta_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_is_theta_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_sigma2
double nuggetkriging_sigma2(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_sigma2(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_sigma2(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_is_sigma2_estim
bool nuggetkriging_is_sigma2_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_is_sigma2_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_is_sigma2_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_nugget
double nuggetkriging_nugget(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_nugget(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_nugget(k));
    return rcpp_result_gen;
END_RCPP
}
// nuggetkriging_is_nugget_estim
bool nuggetkriging_is_nugget_estim(Rcpp::List k);
RcppExport SEXP _rlibkriging_nuggetkriging_is_nugget_estim(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nuggetkriging_is_nugget_estim(k));
    return rcpp_result_gen;
END_RCPP
}
// optim_is_reparametrized
bool optim_is_reparametrized();
RcppExport SEXP _rlibkriging_optim_is_reparametrized() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(optim_is_reparametrized());
    return rcpp_result_gen;
END_RCPP
}
// optim_use_reparametrize
void optim_use_reparametrize(bool reparametrize);
RcppExport SEXP _rlibkriging_optim_use_reparametrize(SEXP reparametrizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type reparametrize(reparametrizeSEXP);
    optim_use_reparametrize(reparametrize);
    return R_NilValue;
END_RCPP
}
// optim_get_theta_lower_factor
double optim_get_theta_lower_factor();
RcppExport SEXP _rlibkriging_optim_get_theta_lower_factor() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(optim_get_theta_lower_factor());
    return rcpp_result_gen;
END_RCPP
}
// optim_set_theta_lower_factor
void optim_set_theta_lower_factor(double theta_lower_factor);
RcppExport SEXP _rlibkriging_optim_set_theta_lower_factor(SEXP theta_lower_factorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta_lower_factor(theta_lower_factorSEXP);
    optim_set_theta_lower_factor(theta_lower_factor);
    return R_NilValue;
END_RCPP
}
// optim_get_theta_upper_factor
double optim_get_theta_upper_factor();
RcppExport SEXP _rlibkriging_optim_get_theta_upper_factor() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(optim_get_theta_upper_factor());
    return rcpp_result_gen;
END_RCPP
}
// optim_set_theta_upper_factor
void optim_set_theta_upper_factor(double theta_upper_factor);
RcppExport SEXP _rlibkriging_optim_set_theta_upper_factor(SEXP theta_upper_factorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta_upper_factor(theta_upper_factorSEXP);
    optim_set_theta_upper_factor(theta_upper_factor);
    return R_NilValue;
END_RCPP
}
// optim_variogram_bounds_heuristic_used
bool optim_variogram_bounds_heuristic_used();
RcppExport SEXP _rlibkriging_optim_variogram_bounds_heuristic_used() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(optim_variogram_bounds_heuristic_used());
    return rcpp_result_gen;
END_RCPP
}
// optim_use_variogram_bounds_heuristic
void optim_use_variogram_bounds_heuristic(bool variogram_bounds_heuristic);
RcppExport SEXP _rlibkriging_optim_use_variogram_bounds_heuristic(SEXP variogram_bounds_heuristicSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type variogram_bounds_heuristic(variogram_bounds_heuristicSEXP);
    optim_use_variogram_bounds_heuristic(variogram_bounds_heuristic);
    return R_NilValue;
END_RCPP
}
// optim_log
void optim_log(int l);
RcppExport SEXP _rlibkriging_optim_log(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    optim_log(l);
    return R_NilValue;
END_RCPP
}
// optim_get_max_iteration
int optim_get_max_iteration();
RcppExport SEXP _rlibkriging_optim_get_max_iteration() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(optim_get_max_iteration());
    return rcpp_result_gen;
END_RCPP
}
// optim_set_max_iteration
void optim_set_max_iteration(int max_iteration);
RcppExport SEXP _rlibkriging_optim_set_max_iteration(SEXP max_iterationSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type max_iteration(max_iterationSEXP);
    optim_set_max_iteration(max_iteration);
    return R_NilValue;
END_RCPP
}
// optim_get_gradient_tolerance
double optim_get_gradient_tolerance();
RcppExport SEXP _rlibkriging_optim_get_gradient_tolerance() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(optim_get_gradient_tolerance());
    return rcpp_result_gen;
END_RCPP
}
// optim_set_gradient_tolerance
void optim_set_gradient_tolerance(double gradient_tolerance);
RcppExport SEXP _rlibkriging_optim_set_gradient_tolerance(SEXP gradient_toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gradient_tolerance(gradient_toleranceSEXP);
    optim_set_gradient_tolerance(gradient_tolerance);
    return R_NilValue;
END_RCPP
}
// optim_get_objective_rel_tolerance
double optim_get_objective_rel_tolerance();
RcppExport SEXP _rlibkriging_optim_get_objective_rel_tolerance() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(optim_get_objective_rel_tolerance());
    return rcpp_result_gen;
END_RCPP
}
// optim_set_objective_rel_tolerance
void optim_set_objective_rel_tolerance(double objective_rel_tolerance);
RcppExport SEXP _rlibkriging_optim_set_objective_rel_tolerance(SEXP objective_rel_toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type objective_rel_tolerance(objective_rel_toleranceSEXP);
    optim_set_objective_rel_tolerance(objective_rel_tolerance);
    return R_NilValue;
END_RCPP
}
// random_reset_seed
void random_reset_seed(unsigned int seed);
RcppExport SEXP _rlibkriging_random_reset_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    random_reset_seed(seed);
    return R_NilValue;
END_RCPP
}
// random_randu
double random_randu();
RcppExport SEXP _rlibkriging_random_randu() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(random_randu());
    return rcpp_result_gen;
END_RCPP
}
// random_randu_vec
arma::vec random_randu_vec(unsigned int n);
RcppExport SEXP _rlibkriging_random_randu_vec(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(random_randu_vec(n));
    return rcpp_result_gen;
END_RCPP
}
// random_randu_mat
arma::mat random_randu_mat(unsigned int n, unsigned int d);
RcppExport SEXP _rlibkriging_random_randu_mat(SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(random_randu_mat(n, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rlibkriging_new_Kriging", (DL_FUNC) &_rlibkriging_new_Kriging, 1},
    {"_rlibkriging_new_KrigingFit", (DL_FUNC) &_rlibkriging_new_KrigingFit, 8},
    {"_rlibkriging_kriging_fit", (DL_FUNC) &_rlibkriging_kriging_fit, 8},
    {"_rlibkriging_kriging_copy", (DL_FUNC) &_rlibkriging_kriging_copy, 1},
    {"_rlibkriging_kriging_model", (DL_FUNC) &_rlibkriging_kriging_model, 1},
    {"_rlibkriging_kriging_summary", (DL_FUNC) &_rlibkriging_kriging_summary, 1},
    {"_rlibkriging_kriging_predict", (DL_FUNC) &_rlibkriging_kriging_predict, 5},
    {"_rlibkriging_kriging_simulate", (DL_FUNC) &_rlibkriging_kriging_simulate, 4},
    {"_rlibkriging_kriging_update", (DL_FUNC) &_rlibkriging_kriging_update, 3},
    {"_rlibkriging_kriging_save", (DL_FUNC) &_rlibkriging_kriging_save, 2},
    {"_rlibkriging_kriging_logLikelihoodFun", (DL_FUNC) &_rlibkriging_kriging_logLikelihoodFun, 5},
    {"_rlibkriging_kriging_logLikelihood", (DL_FUNC) &_rlibkriging_kriging_logLikelihood, 1},
    {"_rlibkriging_kriging_leaveOneOutFun", (DL_FUNC) &_rlibkriging_kriging_leaveOneOutFun, 4},
    {"_rlibkriging_kriging_leaveOneOutVec", (DL_FUNC) &_rlibkriging_kriging_leaveOneOutVec, 2},
    {"_rlibkriging_kriging_leaveOneOut", (DL_FUNC) &_rlibkriging_kriging_leaveOneOut, 1},
    {"_rlibkriging_kriging_logMargPostFun", (DL_FUNC) &_rlibkriging_kriging_logMargPostFun, 4},
    {"_rlibkriging_kriging_logMargPost", (DL_FUNC) &_rlibkriging_kriging_logMargPost, 1},
    {"_rlibkriging_kriging_kernel", (DL_FUNC) &_rlibkriging_kriging_kernel, 1},
    {"_rlibkriging_kriging_optim", (DL_FUNC) &_rlibkriging_kriging_optim, 1},
    {"_rlibkriging_kriging_objective", (DL_FUNC) &_rlibkriging_kriging_objective, 1},
    {"_rlibkriging_kriging_X", (DL_FUNC) &_rlibkriging_kriging_X, 1},
    {"_rlibkriging_kriging_centerX", (DL_FUNC) &_rlibkriging_kriging_centerX, 1},
    {"_rlibkriging_kriging_scaleX", (DL_FUNC) &_rlibkriging_kriging_scaleX, 1},
    {"_rlibkriging_kriging_y", (DL_FUNC) &_rlibkriging_kriging_y, 1},
    {"_rlibkriging_kriging_centerY", (DL_FUNC) &_rlibkriging_kriging_centerY, 1},
    {"_rlibkriging_kriging_scaleY", (DL_FUNC) &_rlibkriging_kriging_scaleY, 1},
    {"_rlibkriging_kriging_normalize", (DL_FUNC) &_rlibkriging_kriging_normalize, 1},
    {"_rlibkriging_kriging_regmodel", (DL_FUNC) &_rlibkriging_kriging_regmodel, 1},
    {"_rlibkriging_kriging_F", (DL_FUNC) &_rlibkriging_kriging_F, 1},
    {"_rlibkriging_kriging_T", (DL_FUNC) &_rlibkriging_kriging_T, 1},
    {"_rlibkriging_kriging_M", (DL_FUNC) &_rlibkriging_kriging_M, 1},
    {"_rlibkriging_kriging_z", (DL_FUNC) &_rlibkriging_kriging_z, 1},
    {"_rlibkriging_kriging_beta", (DL_FUNC) &_rlibkriging_kriging_beta, 1},
    {"_rlibkriging_kriging_is_beta_estim", (DL_FUNC) &_rlibkriging_kriging_is_beta_estim, 1},
    {"_rlibkriging_kriging_theta", (DL_FUNC) &_rlibkriging_kriging_theta, 1},
    {"_rlibkriging_kriging_is_theta_estim", (DL_FUNC) &_rlibkriging_kriging_is_theta_estim, 1},
    {"_rlibkriging_kriging_sigma2", (DL_FUNC) &_rlibkriging_kriging_sigma2, 1},
    {"_rlibkriging_kriging_is_sigma2_estim", (DL_FUNC) &_rlibkriging_kriging_is_sigma2_estim, 1},
    {"_rlibkriging_linalg_get_num_nugget", (DL_FUNC) &_rlibkriging_linalg_get_num_nugget, 0},
    {"_rlibkriging_linalg_set_num_nugget", (DL_FUNC) &_rlibkriging_linalg_set_num_nugget, 1},
    {"_rlibkriging_linalg_chol_safe", (DL_FUNC) &_rlibkriging_linalg_chol_safe, 1},
    {"_rlibkriging_linalg_set_chol_warning", (DL_FUNC) &_rlibkriging_linalg_set_chol_warning, 1},
    {"_rlibkriging_kriging_load", (DL_FUNC) &_rlibkriging_kriging_load, 1},
    {"_rlibkriging_noisekriging_load", (DL_FUNC) &_rlibkriging_noisekriging_load, 1},
    {"_rlibkriging_nuggetkriging_load", (DL_FUNC) &_rlibkriging_nuggetkriging_load, 1},
    {"_rlibkriging_anykriging_load", (DL_FUNC) &_rlibkriging_anykriging_load, 1},
    {"_rlibkriging_new_NoiseKriging", (DL_FUNC) &_rlibkriging_new_NoiseKriging, 1},
    {"_rlibkriging_new_NoiseKrigingFit", (DL_FUNC) &_rlibkriging_new_NoiseKrigingFit, 9},
    {"_rlibkriging_noisekriging_fit", (DL_FUNC) &_rlibkriging_noisekriging_fit, 9},
    {"_rlibkriging_noisekriging_copy", (DL_FUNC) &_rlibkriging_noisekriging_copy, 1},
    {"_rlibkriging_noisekriging_model", (DL_FUNC) &_rlibkriging_noisekriging_model, 1},
    {"_rlibkriging_noisekriging_summary", (DL_FUNC) &_rlibkriging_noisekriging_summary, 1},
    {"_rlibkriging_noisekriging_predict", (DL_FUNC) &_rlibkriging_noisekriging_predict, 5},
    {"_rlibkriging_noisekriging_simulate", (DL_FUNC) &_rlibkriging_noisekriging_simulate, 4},
    {"_rlibkriging_noisekriging_update", (DL_FUNC) &_rlibkriging_noisekriging_update, 4},
    {"_rlibkriging_noisekriging_save", (DL_FUNC) &_rlibkriging_noisekriging_save, 2},
    {"_rlibkriging_noisekriging_logLikelihoodFun", (DL_FUNC) &_rlibkriging_noisekriging_logLikelihoodFun, 4},
    {"_rlibkriging_noisekriging_logLikelihood", (DL_FUNC) &_rlibkriging_noisekriging_logLikelihood, 1},
    {"_rlibkriging_noisekriging_kernel", (DL_FUNC) &_rlibkriging_noisekriging_kernel, 1},
    {"_rlibkriging_noisekriging_optim", (DL_FUNC) &_rlibkriging_noisekriging_optim, 1},
    {"_rlibkriging_noisekriging_objective", (DL_FUNC) &_rlibkriging_noisekriging_objective, 1},
    {"_rlibkriging_noisekriging_X", (DL_FUNC) &_rlibkriging_noisekriging_X, 1},
    {"_rlibkriging_noisekriging_centerX", (DL_FUNC) &_rlibkriging_noisekriging_centerX, 1},
    {"_rlibkriging_noisekriging_scaleX", (DL_FUNC) &_rlibkriging_noisekriging_scaleX, 1},
    {"_rlibkriging_noisekriging_y", (DL_FUNC) &_rlibkriging_noisekriging_y, 1},
    {"_rlibkriging_noisekriging_noise", (DL_FUNC) &_rlibkriging_noisekriging_noise, 1},
    {"_rlibkriging_noisekriging_centerY", (DL_FUNC) &_rlibkriging_noisekriging_centerY, 1},
    {"_rlibkriging_noisekriging_scaleY", (DL_FUNC) &_rlibkriging_noisekriging_scaleY, 1},
    {"_rlibkriging_noisekriging_normalize", (DL_FUNC) &_rlibkriging_noisekriging_normalize, 1},
    {"_rlibkriging_noisekriging_regmodel", (DL_FUNC) &_rlibkriging_noisekriging_regmodel, 1},
    {"_rlibkriging_noisekriging_F", (DL_FUNC) &_rlibkriging_noisekriging_F, 1},
    {"_rlibkriging_noisekriging_T", (DL_FUNC) &_rlibkriging_noisekriging_T, 1},
    {"_rlibkriging_noisekriging_M", (DL_FUNC) &_rlibkriging_noisekriging_M, 1},
    {"_rlibkriging_noisekriging_z", (DL_FUNC) &_rlibkriging_noisekriging_z, 1},
    {"_rlibkriging_noisekriging_beta", (DL_FUNC) &_rlibkriging_noisekriging_beta, 1},
    {"_rlibkriging_noisekriging_is_beta_estim", (DL_FUNC) &_rlibkriging_noisekriging_is_beta_estim, 1},
    {"_rlibkriging_noisekriging_theta", (DL_FUNC) &_rlibkriging_noisekriging_theta, 1},
    {"_rlibkriging_noisekriging_is_theta_estim", (DL_FUNC) &_rlibkriging_noisekriging_is_theta_estim, 1},
    {"_rlibkriging_noisekriging_sigma2", (DL_FUNC) &_rlibkriging_noisekriging_sigma2, 1},
    {"_rlibkriging_noisekriging_is_sigma2_estim", (DL_FUNC) &_rlibkriging_noisekriging_is_sigma2_estim, 1},
    {"_rlibkriging_new_NuggetKriging", (DL_FUNC) &_rlibkriging_new_NuggetKriging, 1},
    {"_rlibkriging_new_NuggetKrigingFit", (DL_FUNC) &_rlibkriging_new_NuggetKrigingFit, 8},
    {"_rlibkriging_nuggetkriging_fit", (DL_FUNC) &_rlibkriging_nuggetkriging_fit, 8},
    {"_rlibkriging_nuggetkriging_copy", (DL_FUNC) &_rlibkriging_nuggetkriging_copy, 1},
    {"_rlibkriging_nuggetkriging_model", (DL_FUNC) &_rlibkriging_nuggetkriging_model, 1},
    {"_rlibkriging_nuggetkriging_summary", (DL_FUNC) &_rlibkriging_nuggetkriging_summary, 1},
    {"_rlibkriging_nuggetkriging_predict", (DL_FUNC) &_rlibkriging_nuggetkriging_predict, 5},
    {"_rlibkriging_nuggetkriging_simulate", (DL_FUNC) &_rlibkriging_nuggetkriging_simulate, 4},
    {"_rlibkriging_nuggetkriging_update", (DL_FUNC) &_rlibkriging_nuggetkriging_update, 3},
    {"_rlibkriging_nuggetkriging_save", (DL_FUNC) &_rlibkriging_nuggetkriging_save, 2},
    {"_rlibkriging_nuggetkriging_logLikelihoodFun", (DL_FUNC) &_rlibkriging_nuggetkriging_logLikelihoodFun, 4},
    {"_rlibkriging_nuggetkriging_logLikelihood", (DL_FUNC) &_rlibkriging_nuggetkriging_logLikelihood, 1},
    {"_rlibkriging_nuggetkriging_logMargPostFun", (DL_FUNC) &_rlibkriging_nuggetkriging_logMargPostFun, 4},
    {"_rlibkriging_nuggetkriging_logMargPost", (DL_FUNC) &_rlibkriging_nuggetkriging_logMargPost, 1},
    {"_rlibkriging_nuggetkriging_kernel", (DL_FUNC) &_rlibkriging_nuggetkriging_kernel, 1},
    {"_rlibkriging_nuggetkriging_optim", (DL_FUNC) &_rlibkriging_nuggetkriging_optim, 1},
    {"_rlibkriging_nuggetkriging_objective", (DL_FUNC) &_rlibkriging_nuggetkriging_objective, 1},
    {"_rlibkriging_nuggetkriging_X", (DL_FUNC) &_rlibkriging_nuggetkriging_X, 1},
    {"_rlibkriging_nuggetkriging_centerX", (DL_FUNC) &_rlibkriging_nuggetkriging_centerX, 1},
    {"_rlibkriging_nuggetkriging_scaleX", (DL_FUNC) &_rlibkriging_nuggetkriging_scaleX, 1},
    {"_rlibkriging_nuggetkriging_y", (DL_FUNC) &_rlibkriging_nuggetkriging_y, 1},
    {"_rlibkriging_nuggetkriging_centerY", (DL_FUNC) &_rlibkriging_nuggetkriging_centerY, 1},
    {"_rlibkriging_nuggetkriging_scaleY", (DL_FUNC) &_rlibkriging_nuggetkriging_scaleY, 1},
    {"_rlibkriging_nuggetkriging_normalize", (DL_FUNC) &_rlibkriging_nuggetkriging_normalize, 1},
    {"_rlibkriging_nuggetkriging_regmodel", (DL_FUNC) &_rlibkriging_nuggetkriging_regmodel, 1},
    {"_rlibkriging_nuggetkriging_F", (DL_FUNC) &_rlibkriging_nuggetkriging_F, 1},
    {"_rlibkriging_nuggetkriging_T", (DL_FUNC) &_rlibkriging_nuggetkriging_T, 1},
    {"_rlibkriging_nuggetkriging_M", (DL_FUNC) &_rlibkriging_nuggetkriging_M, 1},
    {"_rlibkriging_nuggetkriging_z", (DL_FUNC) &_rlibkriging_nuggetkriging_z, 1},
    {"_rlibkriging_nuggetkriging_beta", (DL_FUNC) &_rlibkriging_nuggetkriging_beta, 1},
    {"_rlibkriging_nuggetkriging_is_beta_estim", (DL_FUNC) &_rlibkriging_nuggetkriging_is_beta_estim, 1},
    {"_rlibkriging_nuggetkriging_theta", (DL_FUNC) &_rlibkriging_nuggetkriging_theta, 1},
    {"_rlibkriging_nuggetkriging_is_theta_estim", (DL_FUNC) &_rlibkriging_nuggetkriging_is_theta_estim, 1},
    {"_rlibkriging_nuggetkriging_sigma2", (DL_FUNC) &_rlibkriging_nuggetkriging_sigma2, 1},
    {"_rlibkriging_nuggetkriging_is_sigma2_estim", (DL_FUNC) &_rlibkriging_nuggetkriging_is_sigma2_estim, 1},
    {"_rlibkriging_nuggetkriging_nugget", (DL_FUNC) &_rlibkriging_nuggetkriging_nugget, 1},
    {"_rlibkriging_nuggetkriging_is_nugget_estim", (DL_FUNC) &_rlibkriging_nuggetkriging_is_nugget_estim, 1},
    {"_rlibkriging_optim_is_reparametrized", (DL_FUNC) &_rlibkriging_optim_is_reparametrized, 0},
    {"_rlibkriging_optim_use_reparametrize", (DL_FUNC) &_rlibkriging_optim_use_reparametrize, 1},
    {"_rlibkriging_optim_get_theta_lower_factor", (DL_FUNC) &_rlibkriging_optim_get_theta_lower_factor, 0},
    {"_rlibkriging_optim_set_theta_lower_factor", (DL_FUNC) &_rlibkriging_optim_set_theta_lower_factor, 1},
    {"_rlibkriging_optim_get_theta_upper_factor", (DL_FUNC) &_rlibkriging_optim_get_theta_upper_factor, 0},
    {"_rlibkriging_optim_set_theta_upper_factor", (DL_FUNC) &_rlibkriging_optim_set_theta_upper_factor, 1},
    {"_rlibkriging_optim_variogram_bounds_heuristic_used", (DL_FUNC) &_rlibkriging_optim_variogram_bounds_heuristic_used, 0},
    {"_rlibkriging_optim_use_variogram_bounds_heuristic", (DL_FUNC) &_rlibkriging_optim_use_variogram_bounds_heuristic, 1},
    {"_rlibkriging_optim_log", (DL_FUNC) &_rlibkriging_optim_log, 1},
    {"_rlibkriging_optim_get_max_iteration", (DL_FUNC) &_rlibkriging_optim_get_max_iteration, 0},
    {"_rlibkriging_optim_set_max_iteration", (DL_FUNC) &_rlibkriging_optim_set_max_iteration, 1},
    {"_rlibkriging_optim_get_gradient_tolerance", (DL_FUNC) &_rlibkriging_optim_get_gradient_tolerance, 0},
    {"_rlibkriging_optim_set_gradient_tolerance", (DL_FUNC) &_rlibkriging_optim_set_gradient_tolerance, 1},
    {"_rlibkriging_optim_get_objective_rel_tolerance", (DL_FUNC) &_rlibkriging_optim_get_objective_rel_tolerance, 0},
    {"_rlibkriging_optim_set_objective_rel_tolerance", (DL_FUNC) &_rlibkriging_optim_set_objective_rel_tolerance, 1},
    {"_rlibkriging_random_reset_seed", (DL_FUNC) &_rlibkriging_random_reset_seed, 1},
    {"_rlibkriging_random_randu", (DL_FUNC) &_rlibkriging_random_randu, 0},
    {"_rlibkriging_random_randu_vec", (DL_FUNC) &_rlibkriging_random_randu_vec, 1},
    {"_rlibkriging_random_randu_mat", (DL_FUNC) &_rlibkriging_random_randu_mat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rlibkriging(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
